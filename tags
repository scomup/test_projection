!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
C	projection.py	/^C = np.matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]])$/;"	kind:variable	line:136
Camera	slam_simulator.py	/^class Camera:$/;"	kind:class	line:133
Drawer	slam_simulator.py	/^class Drawer:$/;"	kind:class	line:165
MapPoint	slam_simulator.py	/^class MapPoint:$/;"	kind:class	line:118
Optimizer	optimizer.py	/^class Optimizer:$/;"	kind:class	line:10
Optimizer	slam_simulator.py	/^class Optimizer:$/;"	kind:class	line:13
U	projection.py	/^    U = C*p$/;"	kind:variable	line:143
U	projection.py	/^    U = U\/(U[2] + epsilon)$/;"	kind:variable	line:144
X	projection.py	/^X = np.array([])$/;"	kind:variable	line:115
X	projection.py	/^X= np.append(X,Xf)$/;"	kind:variable	line:119
Xf	projection.py	/^Xf = np.array([ -3, -2, -1, 0, 1, 2, 3])$/;"	kind:variable	line:108
Y	projection.py	/^Y = np.array([])$/;"	kind:variable	line:116
Y	projection.py	/^Y= np.append(Y,Yf)$/;"	kind:variable	line:120
Yf	projection.py	/^Yf = np.array([ 1, 1, 1, 1, 1, 1, 1])$/;"	kind:variable	line:110
Z	projection.py	/^Z = np.array([])$/;"	kind:variable	line:117
Z	projection.py	/^Z= np.append(Z,Zf)$/;"	kind:variable	line:121
Zf	projection.py	/^Zf = np.array([ 1, 1, 1, 1, 1, 1, 1])$/;"	kind:variable	line:112
__init__	optimizer.py	/^    def __init__(self, x, y, arg):$/;"	kind:member	line:11
__init__	slam_simulator.py	/^    def __init__(self): $/;"	kind:member	line:119
__init__	slam_simulator.py	/^    def __init__(self): $/;"	kind:member	line:134
__init__	slam_simulator.py	/^    def __init__(self):$/;"	kind:member	line:14
__init__	slam_simulator.py	/^    def __init__(self, camera, mapPoint,opt): $/;"	kind:member	line:166
arg	optimizer.py	/^arg = np.array([[1],[1],[1], [1]])$/;"	kind:variable	line:45
arg	optimizer.py	/^arg = opt.solve()$/;"	kind:variable	line:49
ax1	projection.py	/^ax1 = fig.add_subplot(221, projection='3d')$/;"	kind:variable	line:12
ax2	projection.py	/^ax2 = fig.add_subplot(223)$/;"	kind:variable	line:17
ax3	projection.py	/^ax3 = fig.add_subplot(224)$/;"	kind:variable	line:23
camera	slam_simulator.py	/^camera = Camera()$/;"	kind:variable	line:252
computeProjection	slam_simulator.py	/^    def computeProjection(self, mapPoint, Rwc, twc): $/;"	kind:member	line:151
computeRotationMatrix	slam_simulator.py	/^    def computeRotationMatrix(self, x, y, z): $/;"	kind:member	line:157
e	optimizer.py	/^    def e(self):$/;"	kind:member	line:17
e	slam_simulator.py	/^    def e(self,Y_i,mapPoint):$/;"	kind:member	line:34
epsilon	projection.py	/^epsilon = sys.float_info.epsilon$/;"	kind:variable	line:9
epsilon	slam_simulator.py	/^epsilon = sys.float_info.epsilon$/;"	kind:variable	line:9
fig	projection.py	/^fig = plt.figure()$/;"	kind:variable	line:11
getTotalError	slam_simulator.py	/^    def getTotalError(self):$/;"	kind:member	line:82
jacobian_i	optimizer.py	/^    def jacobian_i(self, x):$/;"	kind:member	line:21
jacobian_i	slam_simulator.py	/^    def jacobian_i(self, mapPoint):$/;"	kind:member	line:56
l	projection.py	/^    l = np.linalg.norm(p)$/;"	kind:variable	line:156
mapPoint	slam_simulator.py	/^mapPoint = MapPoint()$/;"	kind:variable	line:251
n	projection.py	/^n = 100$/;"	kind:variable	line:29
opt	optimizer.py	/^opt = Optimizer(x, y_noise, arg)$/;"	kind:variable	line:48
opt	slam_simulator.py	/^opt = Optimizer()$/;"	kind:variable	line:253
optimizer.py	optimizer.py	1;"	kind:file	line:1
p	projection.py	/^    p = np.matrix([[x], [y], [z]])$/;"	kind:variable	line:142
p	projection.py	/^    p = np.matrix([[x], [y], [z]])$/;"	kind:variable	line:155
phi	projection.py	/^        phi = -phi        $/;"	kind:variable	line:160
phi	projection.py	/^    phi = math.acos(x\/(math.sqrt(x**2 + y**2) + epsilon))$/;"	kind:variable	line:158
press	slam_simulator.py	/^    def press(self, event):$/;"	kind:member	line:202
projection.py	projection.py	1;"	kind:file	line:1
r	projection.py	/^    r = 2*math.tan(theta\/2)$/;"	kind:variable	line:161
r_	projection.py	/^    r_ = math.sqrt(u**2 + v**2)$/;"	kind:variable	line:166
set	slam_simulator.py	/^    def set(self, Y, mapPoint, arg, fx, fy, cx, cy, yaw, twc):$/;"	kind:member	line:17
slam_simulator.py	slam_simulator.py	1;"	kind:file	line:1
solve	optimizer.py	/^    def solve(self):$/;"	kind:member	line:25
solve	slam_simulator.py	/^    def solve(self):$/;"	kind:member	line:92
theta	projection.py	/^    theta = math.acos(z\/l)$/;"	kind:variable	line:157
u	projection.py	/^    u = U[0]$/;"	kind:variable	line:145
u	projection.py	/^    u = r*math.cos(phi)$/;"	kind:variable	line:162
v	projection.py	/^    v = U[1]$/;"	kind:variable	line:146
v	projection.py	/^    v = r*math.sin(phi)$/;"	kind:variable	line:163
x	optimizer.py	/^x = np.arange(0,6,0.1)$/;"	kind:variable	line:44
x	projection.py	/^    x = X[i]$/;"	kind:variable	line:139
x	projection.py	/^    x = X[i]$/;"	kind:variable	line:152
x_	projection.py	/^    x_ = u * math.sqrt(1 - z_**2)\/(r_ + epsilon)$/;"	kind:variable	line:168
y	optimizer.py	/^y = 1*x**3 - 2*x**2 - 4*x + 5$/;"	kind:variable	line:46
y	projection.py	/^    y = Y[i]$/;"	kind:variable	line:140
y	projection.py	/^    y = Y[i]$/;"	kind:variable	line:153
y_	projection.py	/^    y_ = v * math.sqrt(1 - z_**2)\/(r_ + epsilon)$/;"	kind:variable	line:169
y_noise	optimizer.py	/^y_noise = y + np.random.rand(x.size) * 10 - 5$/;"	kind:variable	line:47
y_predict	optimizer.py	/^y_predict = arg[0,0]*x**3 + arg[1,0]*x**2 + arg[2,0]*x + arg[3,0]$/;"	kind:variable	line:51
z	projection.py	/^    z = Z[i]$/;"	kind:variable	line:141
z	projection.py	/^    z = Z[i]$/;"	kind:variable	line:154
z_	projection.py	/^    z_ = math.cos(2*math.atan(r\/2))$/;"	kind:variable	line:167
